F                                                                        [100%]
=================================== FAILURES ===================================
_____________________________________ test _____________________________________

    def test():
    
        assert match_parens(['()(', ')']) == 'Yes'
        assert match_parens([')', ')']) == 'No'
        assert match_parens(['()(', ')']) == 'Yes'
        assert match_parens([')', ')']) == 'No'
>       assert match_parens(['']) == 'Yes'

tmpwzxyqd0g/test.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

lst = ['']

    def match_parens(lst):
        '''
        You are given a list of two strings, both strings consist of open
        parentheses '(' or close parentheses ')' only.
        Your job is to check if it is possible to concatenate the two strings in
        some order, that the resulting string will be good.
        A string S is considered to be good if and only if all parentheses in S
        are balanced. For example: the string '(())()' is good, while the string
        '())' is not.
        Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    
        Examples:
        match_parens(['()(', ')']) == 'Yes'
        match_parens([')', ')']) == 'No'
        '''
        def check(s):
            val = 0
            for i in s:
                if i == '(':
                    val = val + 1
                else:
                    val = val - 1
                if val < 0:
                    return False
            return True if val == 0 else False
    
>       S1 = lst[0] + lst[1]
E       IndexError: list index out of range

tmpwzxyqd0g/m.py:27: IndexError
=========================== short test summary info ============================
FAILED tmpwzxyqd0g/test.py::test - IndexError: list index out of range
!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!
