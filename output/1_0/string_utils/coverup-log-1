---- 2024-02-28T21:47:27 startup ----
Command: /usr/local/bin/coverup --write-requirements-to requirements.txt --source-dir ./string_utils --tests-dir coverup-tests --pytest-args --rootdir . -c /dev/null --log-file coverup-log-1 --checkpoint coverup-ckpt.json string_utils/errors.py
---- 2024-02-28T21:47:29 string_utils/errors.py:6-17 ----

You are an expert Python test-driven developer.
The code below, extracted from string_utils/errors.py, module string_utils.errors, does not achieve full coverage:
when tested, it does not execute.
Create a new pytest test function that executes these missing lines/branches, always making
sure that the new test is correct and indeed improves coverage.
Always send entire Python test scripts when proposing a new test or correcting one you
previously proposed.
Be sure to include assertions in the test that verify any applicable postconditions.
Please also make VERY SURE to clean up after the test, so as not to affect other tests;
use 'pytest-mock' if appropriate.
Write as little top-level code as possible, and in particular do not include any top-level code
calling into pytest.main or the test itself.
Respond ONLY with the Python code enclosed in backticks, without any explanation.
```python
            class InvalidInputError(TypeError):
                """
                Custom error raised when received object is not a string as expected.
                """
            
                def __init__(self, input_data: Any):
                    """
                    :param input_data: Any received object
                    """
                    type_name = type(input_data).__name__
                    msg = 'Expected "str", received "{}"'.format(type_name)
                    super().__init__(msg)

```

---- 2024-02-28T21:47:32 string_utils/errors.py:6-17 ----
```python
import pytest
from string_utils.errors import InvalidInputError

def test_invalid_input_error():
    with pytest.raises(InvalidInputError) as exc_info:
        raise InvalidInputError(123)

    assert str(exc_info.value) == 'Expected "str", received "int"'
```
---- 2024-02-28T21:47:32 string_utils/errors.py:6-17 ----
total usage: {'prompt_tokens': 275, 'completion_tokens': 60}
---- 2024-02-28T21:47:33 string_utils/errors.py:6-17 ----
.                                                                        [100%]

---- 2024-02-28T21:47:33 string_utils/errors.py:6-17 ----
Saved as coverup-tests/test_coverup_1.py

