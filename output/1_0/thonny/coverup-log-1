---- 2024-02-28T23:19:16 startup ----
Command: /usr/local/bin/coverup --write-requirements-to requirements.txt --source-dir ./thonny --tests-dir coverup-tests --pytest-args --rootdir . -c /dev/null --log-file coverup-log-1 --checkpoint coverup-ckpt.json thonny/token_utils.py
---- 2024-02-28T23:19:37 thonny/token_utils.py:5-7 ----

You are an expert Python test-driven developer.
The code below, extracted from thonny/token_utils.py, module thonny.token_utils, does not achieve full coverage:
when tested, it does not execute.
Create a new pytest test function that executes these missing lines/branches, always making
sure that the new test is correct and indeed improves coverage.
Always send entire Python test scripts when proposing a new test or correcting one you
previously proposed.
Be sure to include assertions in the test that verify any applicable postconditions.
Please also make VERY SURE to clean up after the test, so as not to affect other tests;
use 'pytest-mock' if appropriate.
Write as little top-level code as possible, and in particular do not include any top-level code
calling into pytest.main or the test itself.
Respond ONLY with the Python code enclosed in backticks, without any explanation.
```python
            def matches_any(name, alternates):
                "Return a named group pattern matching list of alternates."
                return "(?P<%s>" % name + "|".join(alternates) + ")"

```

---- 2024-02-28T23:19:51 thonny/token_utils.py:5-7 ----
```python
import pytest
from thonny.token_utils import matches_any

def test_matches_any():
    # Test with a single alternate
    single_alternate = matches_any("test_single", ["single"])
    assert single_alternate == "(?P<test_single>single)"
    
    # Test with multiple alternates
    multiple_alternates = matches_any("test_multiple", ["multi", "ple"])
    assert multiple_alternates == "(?P<test_multiple>multi|ple)"
    
    # Test with no alternates
    no_alternates = matches_any("test_none", [])
    assert no_alternates == "(?P<test_none>)"
    
    # Test with special regex characters to ensure they are not treated as regex operators
    special_chars_alternates = matches_any("test_special", ["a|b", "(c)", "[d-e]"])
    assert special_chars_alternates == "(?P<test_special>a|b|(c)|[d-e])"
```
---- 2024-02-28T23:19:51 thonny/token_utils.py:5-7 ----
total usage: {'prompt_tokens': 238, 'completion_tokens': 204}
---- 2024-02-28T23:19:52 thonny/token_utils.py:5-7 ----
.                                                                        [100%]

---- 2024-02-28T23:19:52 thonny/token_utils.py:5-7 ----
Saved as coverup-tests/test_coverup_1.py

